# Default values for rag-system
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []

# Service Account
serviceAccount:
  create: true
  name: ""
  annotations:
    # Example for IRSA (IAM Roles for Service Accounts)
    # eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT:role/RAG_APP_ROLE

# Configuration (non-sensitive)
config:
  environment: "dev"
  logLevel: "info"
  
  database:
    host: ""
    port: "5432"
    name: "rag_db"
    username: "postgres"
  
  redis:
    host: ""
    port: "6379"
  
  aws:
    region: "ap-northeast-2"
  
  s3:
    bucketName: ""
  
  vectorDB:
    type: "milvus"
    host: "milvus"
    port: "19530"
  
  aiModel:
    provider: "openai"
    name: "gpt-4"
    embeddingModel: "text-embedding-3-small"

# Secrets (sensitive configuration)
secrets:
  databaseUrl: ""
  databasePassword: ""
  redisUrl: ""
  redisAuthToken: ""
  openaiApiKey: ""
  jwtSecret: ""

# Frontend configuration
frontend:
  enabled: true
  image:
    repository: rag-frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    annotations: {}
  
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    hosts:
      - host: rag-system.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: rag-system-tls
        hosts:
          - rag-system.example.com
  
  env: []
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  volumeMounts: []
  volumes: []

# Backend configuration
backend:
  enabled: true
  image:
    repository: rag-backend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations: {}
  
  env: []
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  volumeMounts: []
  volumes: []

# External PostgreSQL configuration (for external RDS)
postgresql:
  enabled: false
  auth:
    postgresPassword: "password"
    database: "rag_db"
  primary:
    persistence:
      enabled: true
      size: 10Gi

# External Redis configuration (for external ElastiCache)
redis:
  enabled: false
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 1Gi

# Vector database configuration
vectorDB:
  # Set to true if deploying Milvus in-cluster
  enabled: false
  
  milvus:
    host: "milvus"
    port: 19530
    
  # Alternative: Pinecone configuration
  pinecone:
    environment: ""
    apiKey: ""

# Monitoring
monitoring:
  enabled: false
  prometheus:
    enabled: false
  grafana:
    enabled: false

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Network policies
networkPolicy:
  enabled: false

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1 