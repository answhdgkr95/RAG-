name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_rag
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: python -m pip install --upgrade pip
      - run: pip install -r requirements.txt
      - run: pip install pytest-cov flake8 black isort mypy
      - run: black --check app
      - run: isort --check-only .
      - run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - run: mypy . --ignore-missing-imports
      - run: pytest --cov=. --cov-report=xml --cov-report=term-missing
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_rag
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          OPENAI_API_KEY: test-key

  backend-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: python -m pip install --upgrade pip
      - run: pip install safety bandit
      - run: safety check --json
      - run: bandit -r . -f json

  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci
      - run: npm run lint
      - run: npm run build
      - run: npm test

  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_rag
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - run: docker-compose -f docker-compose.test.yml up -d
      - run: sleep 30
      - run: curl -f http://localhost:3000 || exit 1
      - run: curl -f http://localhost:8000/health || exit 1
      - run: docker-compose -f docker-compose.test.yml down

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - run: echo "Deploying to staging environment..."
      # 실제 배포 스크립트 추가

  notify:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, integration-test]
    if: always()
    steps:
      - run: |
          if [ "${{ needs.integration-test.result }}" == "success" ]; then
            echo "✅ All tests passed!"
          else
            echo "❌ Some tests failed!"
            exit 1
          fi 