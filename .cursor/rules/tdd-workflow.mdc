---
alwaysApply: true
---
# TDD Workflow

## Mandatory Red-Green-Refactor Cycle

**CRITICAL**: For ALL code changes, follow this TDD cycle.

### 🔴 RED: Write failing test FIRST

- Start with simplest scenario, ONE test at a time
- Ensure clear failure message for RIGHT reason

### 🟢 GREEN: Minimal code to pass

- "Fake it till you make it" approach
- YAGNI principle: implement only what's needed

### 🔄 REFACTOR: Improve while tests green

- Remove duplication, improve naming
- Apply [development-guidelines.mdc](mdc:.cursor/rules/development-guidelines.mdc)

## Test Quality: FIRST Principles

- **F**ast: milliseconds, not seconds
- **I**ndependent: no shared state  
- **R**epeatable: same result every time
- **S**elf-validating: clear pass/fail
- **T**imely: written before production code

## AAA Pattern

```typescript
describe('DocumentValidator', () => {
  it('should reject oversized files', () => {
    // Arrange
    const MAX_SIZE = 10 * 1024 * 1024;
    const largeFile = new File(['x'.repeat(MAX_SIZE + 1)], 'large.pdf');
    const validator = new DocumentValidator();

    // Act & Assert
    expect(() => validator.validateFileSize(largeFile))
      .toThrow('파일 크기는 10MB를 초과할 수 없습니다.');
  });
});
```

## Technology-Specific Testing

### Frontend (Jest + Testing Library)

```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { useDocumentStore } from '@/stores/documentStore';

jest.mock('@/stores/documentStore');

describe('DocumentUpload', () => {
  it('shows upload progress', async () => {
    (useDocumentStore as jest.Mock).mockReturnValue({
      uploadDocument: jest.fn(),
      isLoading: true
    });

    render(<DocumentUpload />);
    expect(screen.getByText(/업로드 중/i)).toBeInTheDocument();
  });
});
```

### Backend (pytest + FastAPI)

```python
import pytest
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_upload_document_success(auth_headers):
    response = client.post(
        "/api/v1/documents/",
        files={"file": ("test.pdf", b"content", "application/pdf")},
        data={"title": "Test"},
        headers=auth_headers
    )
    assert response.status_code == 201
    assert response.json()["title"] == "Test"

def test_upload_invalid_file_type():
    response = client.post(
        "/api/v1/documents/",
        files={"file": ("test.exe", b"content", "application/exe")}
    )
    assert response.status_code == 400
```

## RAG System Testing

### Vector Service Testing

```python
from unittest.mock import Mock, patch
from app.services.vector_service import VectorService

def test_store_embeddings():
    mock_milvus = Mock()
    with patch('app.services.vector_service.MilvusClient', return_value=mock_milvus):
        service = VectorService()
        
        with patch('app.services.vector_service.generate_embeddings', 
                  return_value=[[0.1, 0.2, 0.3]]):
            result = service.store_document_embeddings("doc_1", ["chunk1"])
        
        mock_milvus.insert.assert_called_once()
        assert result["document_id"] == "doc_1"
```

### AI Service Testing

```python
def test_generate_answer_success():
    mock_response = {"choices": [{"message": {"content": "AI response"}}]}
    
    with patch('app.services.ai_service.openai.ChatCompletion.acreate', 
              return_value=mock_response):
        service = AIService()
        result = service.generate_answer("query", ["context"])
    
    assert "AI response" in result["answer"]
```

## Environment Integration

- Test structure: backend/tests/ (to be created), frontend/__tests__/ (to be created)
- CI/CD workflows: [.github/workflows/](mdc:.github/workflows)
- Pre-commit testing in [.pre-commit-config.yaml](mdc:.pre-commit-config.yaml)

## Quality Requirements

- **Coverage**: 80% minimum, 90% target
- **Performance**: Unit tests <100ms, Integration <5s
- **Dependencies**: Mock external services (OpenAI, Milvus)

## TDD Workflow Example

```bash
# 1. RED: Write failing test
git commit -m "test: add document validation tests"

# 2. GREEN: Minimal implementation  
git commit -m "feat: implement basic validation"

# 3. REFACTOR: Improve design
git commit -m "refactor: enhance validation architecture"
```

## Anti-Patterns

❌ **Avoid:**

- Writing production code before tests
- Testing implementation details
- Complex test setup (use factories/fixtures)

✅ **Follow:**

- Test behavior, not implementation
- One assertion per test concept
- Clear test names describing scenarios

Remember: TDD drives better design. Let tests guide your RAG system architecture for reliability and maintainability.




