---
description: 
globs: 
alwaysApply: false
---
# Step-by-Step Development Process

## Mandatory 3-Phase Approach

For EVERY development task, follow this systematic process.

## Phase 1: üîç Exploration & Analysis

### Required Actions:
1. **File & Pattern Exploration**
   - Map relevant files and directories
   - Study [README.md](mdc:README.md) and [docs/DEVELOPMENT_GUIDE.md](mdc:docs/DEVELOPMENT_GUIDE.md)
   - Review existing patterns: naming, error handling, architecture
   - Check [backend/tests/](mdc:backend/tests) and [frontend/__tests__/](mdc:frontend/__tests__) for test patterns

2. **Technology-Specific Review**
   - **Frontend**: Components in [frontend/components/](mdc:frontend/components), Zustand patterns, Tailwind usage
   - **Backend**: API routers in [backend/api/](mdc:backend/api), service layers, database models

3. **Dependency Analysis**
   - External deps: [backend/requirements.txt](mdc:backend/requirements.txt), [frontend/package.json](mdc:frontend/package.json)
   - CI/CD workflows: [.github/workflows/](mdc:.github/workflows)

### Key Questions:
- How is similar functionality implemented?
- What patterns does the codebase follow?
- Are there reusable utilities?
- What are security/error handling conventions?

## Phase 2: üéØ Requirements & Design

### Analysis & Planning:
1. **Functional Requirements**
   - Exact functionality needed
   - Inputs, outputs, edge cases
   - RAG system integration points
   - Performance requirements

2. **Technical Constraints**
   - Security (file validation, access control)
   - Integration with existing code
   - OpenAI API limits, Milvus performance
   - Database schema implications

3. **Design Decisions**
   - Follow [development-guidelines.mdc](mdc:.cursor/rules/development-guidelines.mdc) patterns
   - Plan error handling and security
   - Define interfaces and testing approach per [tdd-workflow.mdc](mdc:.cursor/rules/tdd-workflow.mdc)

### Design Documentation:
```markdown
## Implementation Plan
- **Component**: [Name and purpose]
- **Dependencies**: [External services, modules]
- **Interface**: [Input/output contracts]
- **Error Handling**: [Failure scenarios]
- **Security**: [Validation, permissions]
- **Testing**: [Test scenarios and mocking]
```

## Phase 3: üõ†Ô∏è Implementation

### TDD Implementation:
1. **Start with Tests** ([tdd-workflow.mdc](mdc:.cursor/rules/tdd-workflow.mdc))
   - Write failing test for simplest case
   - Implement minimal code to pass
   - Refactor while keeping tests green

2. **Incremental Development**
   - Build one feature at a time
   - Test in isolation, integrate gradually
   - Use feature flags for large changes

3. **Quality Validation**
   - Follow coding standards
   - Comprehensive error handling
   - Security best practices
   - Performance considerations

### Quality Gates:

#### Before Commit:
‚úÖ **Code Quality**
- [ ] Single responsibility maintained
- [ ] No magic numbers/hardcoded values
- [ ] Comprehensive error handling
- [ ] Security validated

‚úÖ **Testing & Environment**
- [ ] Tests written first (TDD)
- [ ] Pre-commit hooks pass ([.pre-commit-config.yaml](mdc:.pre-commit-config.yaml))
- [ ] Code quality tools satisfied
- [ ] Documentation updated

## Example: Document Similarity Search

### Phase 1: Exploration
```typescript
// Check existing search patterns
// Review: frontend/components/ for search UI
// Check: backend/api/ for search endpoints
// Understand: vector service patterns
```

### Phase 2: Analysis
```markdown
## Similarity Search Requirements
- Accept text query, generate embeddings
- Search Milvus vector database
- Return top 5 similar documents with scores
- Response time < 3 seconds
- Handle concurrent requests
```

### Phase 3: Implementation
```typescript
// TDD cycle implementation
describe('SimilaritySearch', () => {
  it('returns relevant documents', async () => {
    const results = await searchService.search("query");
    expect(results).toHaveLength(5);
    expect(results[0].score).toBeGreaterThan(0.8);
  });
});
```

## RAG System Considerations

### Document Processing
- **Chunking**: Optimal size for embeddings
- **Preprocessing**: Clean and normalize content
- **Vector Generation**: Efficient embedding creation

### AI Integration
- **OpenAI API**: Rate limiting, cost optimization
- **Prompt Engineering**: Effective query construction
- **Response Processing**: Parse and validate AI responses

### Security & Performance
- **File Validation**: Type and content checking
- **Access Control**: User-based permissions
- **Performance**: Query optimization, caching

## Environment Integration

- Follow [.vscode/settings.json](mdc:.vscode/settings.json) setup
- Use [.vscode/extensions.json](mdc:.vscode/extensions.json) recommendations
- Quality tools: ESLint/Prettier (Frontend), Black/flake8 (Backend)

## Git Integration

Follow [git-workflow.mdc](mdc:.cursor/rules/git-workflow.mdc):

```bash
# Phase 1: Exploration only (no commits)

# Phase 2: Design documents
git commit -m "docs: add similarity search design"

# Phase 3: TDD incremental commits
git commit -m "test: add search service tests"
git commit -m "feat(search): implement basic similarity search"
git commit -m "refactor(search): optimize query performance"
```

## Anti-Patterns

‚ùå **Avoid:**
- Jump to implementation without exploration
- Copy-paste without understanding patterns
- Skip testing phases
- Ignore security considerations

‚úÖ **Follow:**
- Invest time in understanding before building
- Reuse established patterns
- Build incrementally with tests
- Document design decisions

Remember: Systematic exploration and analysis prevents debugging and refactoring later. RAG system complexity requires careful planning.




